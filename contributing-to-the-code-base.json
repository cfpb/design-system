{"type":"PR","pr":{"number":381,"head":"5fc92ed141927e4ec8effed9ebb57e4d4f401cf2"},"user":"Sonna Kim","status":"draft","branch":"cms/contributing-to-the-code-base","collection":"getting-started","commitMessage":"Update \"contributing-to-the-code-base\" page","title":"Contributing to the code base","description":"## There are two primary ways to help: using the issue tracker, and changing the codebase.\n\n**Note:**  All contributions to this project will be released under the CC0 public domain dedication. By submitting a pull request or filing a bug, issue, or feature request, you are agreeing to comply with this waiver of copyright interest. Details can be found in our [_TERMS_](https://github.com/cfpb/design-system/blob/master/TERMS.md) _and_ [_LICENSE_](https://github.com/cfpb/design-system/blob/master/LICENSE).\n\n### Using the issue tracker\n\nUse the issue tracker to suggest feature requests, report bugs, and ask questionsâ€”or use it to find ways to contribute, by finding a bug or a feature. If you[ll contribute, say so in thet issue, then follow the _Changing the codebase_ guidance below.\n\n### Changing the codebase\n\nWe work off feature branches from the `master` branch. After you've edited a component, open a Pull Request to merge your feature branch back into `master`.\nFor example, if you wanted to change `@cfpb/buttons` and use it in [cfgov-refresh](https://github.com/cfpb/cfgov-refresh), here's what you'd do:\n\n1. `git clone git@github.com:cfpb/design-system.git`, if you haven't already. \n2. `cd design-system` \n3. `git checkout master && git pull` to ensure you're on the latest changes (this step is not necessary when cloning for the first time). \n4. `yarn` to install dependencies and set up [workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) \n5. `git checkout -b button-fix` to create a new branch for your changes. \n6. Edit file(s) in `/packages/buttons/` however you want. \n7. `yarn run design-system-link` to [link](https://yarnpkg.com/lang/en/docs/cli/link/) your local CF components. \n8. `cd ~/wherever/cfgov-refresh/` to navigate to another project where you'd like to test your buttons changes (in this case, cfgov-refresh). \n9. `yarn link @cfpb/buttons` to link @cfpb/buttons to cfgov-refresh. \n10. `gulp build` in cfgov-refresh to compile your stylesheets. \n11. [Start cfgov-refresh](https://cfpb.github.io/cfgov-refresh/usage/) and navigate to a page with buttons to view your @cfpb/buttons changes. \n12. When you're pleased with your changes, `cd` back to your `design-system` repo and commit your changes: `git commit -am \"Fix button border radius\"` \n13. `git push origin button-fix` to push your branch up to GitHub. \n14. Go to https://github.com/cfpb/design-system and open a pull request to merge `button-fix` into `master`.\n\nIf you are not a current contributor to this repository, use forks by first clicking the fork button on top of the repository and cloning your fork in step 1. In the final step, go to https://github.com/cfpb/design-system and file a pull request by clicking the link to compare changes across forks.\n   ### Updating Documentation\n   The Design System's website lives in this repository's `docs/` directory and is powered by Netlify CMS and Jekyll. To edit any page of the website, click the edit button at the bottom right of the page. You'll need to be added as a contributor to this repository in order to authenticate with Netlify CMS.\n\n### Testing components locally\n\n**Automated tests** can be run with the command `yarn test`.\n\n### Browser support\n\nWe configure [Autoprefixer](#autoprefixer) and [Babel](#babel) to support the last 2 versions of the following browsers:\n  * Chrome\n  * Firefox\n  * Safari\n  * Internet Explorer (see note below)\n  * Edge\n  * Opera\n  * iOS Safari\n  * Opera Mini\n  * Android Browser\n  * BlackBerry Browser\n  * Opera Mobile\n  * Chrome for Android\n  * Firefox for Android\n  * Samsung Internet\n* Internet Explorer 9\n  http://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+9\n  As well as additional Autoprefixer support for:\n* Internet Explorer 8\n  http://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+8\n  What this means to the end-user is we've added a level of backward compatability for modern features as much as possible. This doesn't necessarily mean feature parity. Where it's impossible or impractical to implement a modern feature, we fallback to standard practices for that browser. For example, we do not deliver interactive scripting for Internet Explorer 8, but we do ensure that default browser features continue to work so users that can't or don't want to upgrade continue to have access to the site and our content.\n\n#### Browser Testing\nWe have automated tests that use a headless version of Chrome to ensure the majority of the site is working as expected. For manual testing, we realistically test this project locally or in a virtual environment with the following list of browsers: \n* Chrome - Firefox - Safari - Internet Explorer 8, 9, 10, and 11 - Edge - iOS Safari - Chrome for Android\n\n#### Autoprefixer\nAutoprefixer parses our CSS and adds vendor prefixes to rules where necessary using reported feature support by [Can I Use](https://caniuse.com/). For more information visit the [Autoprefixer documentation site](https://autoprefixer.github.io/).\n  #### Babel\n  Babel compiles our [ES6](http://es6-features.org/) JavaScript where necessary for the browsers that either don't support or have limited support of ES6 features. For more information visit the [Babel documentation site](https://babeljs.io/).\n  #### Known feature differences\n* JavaScript: We do not serve interactive scripting to IE 8 but we do deliver\n  analytics via JavaScript.\n* Icons: We currently use icon fonts to deliver scalable icons. Browsers that\n  do not support icon fonts unfortunately do not receive backups but we try to\n  always pair icons with text.\n\n#### Resources\n\n* https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ - https://saucelabs.com/beta/dashboard/tests - http://developer.samsung.com/remotetestlab/rtlDeviceList.action#\n\n## Release management\n\nReady to publish changes to npm?\n\n1. Ensure you're on `master` and `git pull` to confirm you're up-to-date. 1. Export a personal access token called\n   [`GITHUB_AUTH`](https://github.com/lerna/lerna-changelog#github-token).\n2. Run `yarn run changelog` and open `CHANGELOG.md` to see a preview\n   of new changelog entries.\n   We use a [tool](https://github.com/lerna/lerna-changelog#usage) that scans our\n   Pull Requests for specific labels so if you see a PR missing from the changelog,\n   ensure it has been labeled `breaking`, `enhancement`, `bug`,\n   `documentation` or `internal`.\n3. If you're pleased with the changelog preview,\n   `git checkout CHANGELOG.md` to reset it.\n4. Run `yarn run release` to start the release. 1. If all packages are shown as having been published,\n   run `git push` to push changes to the remote `master` branch.\n\nLerna will update the changelog, ask for a new version number, create a git tag, push to GitHub and publish to npm.\n\n## Notes\n\nThe CSS and JavaScript files that are generated during the build task are only used for testing. Because this project doesn't necessarily produce a final product it is up to the projects that use it to generate and maintain their own browser support config. An example of this is [consumerfinance.gov](https://github.com/cfpb/cfgov-refresh), which generates specific IE 8 and 9 stylesheets, whereas the Design System build task bundles those with the main stylesheet. Despite the differences in delivery, the output and support are the same.\n\n### Adhere to any linting errors or warnings\n\nThe `gulp lint` linting tasks that are set up within the build processes are there to promote consistency. When contributing code please publicly track that there are no linting errors or warnings using the testing checklist in the pull request description.\n\n### Follow our CSS naming conventions\n\n**We are using a customized BEM format**\n`css .block-name .block-name_element-name .block-name__block-modifier .block-name_element-name__element-modifier`\n**Avoid creating elements of modifiers**\nAppending an element name to a modifier class can result in a confusing class name like `.list__space_item`. Avoid this in favor of using a descendant, like this: `.list__spaced .list_item`.\n\n### Shoot for mobile first declarations\n\nIn most cases styles should be declared mobile first, then enhanced with `min-width` media queries. By doing this we create a base experience that all devices can use and one that does not require media query support.","objects":{"entry":{"path":"docs/getting-started/contributing-to-the-code-base.md","sha":"6010d57f2c4563e07635c9ed485bc4ed084f2b6a"},"files":[]},"timeStamp":"2019-12-10T19:34:33.712Z"}