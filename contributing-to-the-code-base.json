{"type":"PR","pr":{"number":363,"head":"9dc4223afd08cc0c82b3ae75e7b4d8e388ffdb43"},"user":"Ans","status":"draft","branch":"cms/contributing-to-the-code-base","collection":"getting-started","commitMessage":"Update \"contributing-to-the-code-base\" page","title":"Contributing to the code base","description":"<p class=\"lead-paragraph\">  All contributions to this project will be released\nunder the CC0 public domain\ndedication. By submitting a pull request or filing a bug, issue, or feature\nrequest, you are agreeing to comply with this waiver of copyright interest.\nDetails can be found in our <a href=\"https://github.com/cfpb/design-system/blob/master/TERMS.md\">TERMS</a> and\n<a href=\"https://github.com/cfpb/design-system/blob/master/LICENSE\">LICENSE</a>.\n</p>\n\nThere are three primary steps toward contributing:\n- [Using the issue tracker](#using-the-issue-tracker) to find filed bugs or file your own.\n- [Changing the codebase](#changing-the-codebase) to fix issues.\n- [Release management](#release-management) to release the fixes.\n\n\n## Using the issue tracker\n\nUse the issue tracker to suggest feature requests, report bugs, and ask\nquestions. This is also a great way to connect with the developers of the\nproject as well as others who are interested in this solution.\nUse the issue tracker to find ways to contribute. Find a bug or a feature,\nmention in the issue that you will take on that effort, then follow the\n_Changing the codebase_ guidance below.\n\n\n## Changing the codebase\n\nWe work off feature branches from the `master` branch. After you've edited a\ncomponent, open a Pull Request to merge your feature branch back into\n`master`.\n\nFor example, if you wanted to change `cf-buttons` and use it in\n[cfgov-refresh](https://github.com/cfpb/cfgov-refresh), here's what you'd do:\n\n1. `git clone git@github.com:cfpb/capital-framework.git`, if you haven't\nalready. \n1. `cd capital-framework` \n\n1. `git checkout master && git pull` to\nensure you're on the latest changes (this step is not necessary when cloning\nfor the first time). \n1. `yarn` to install dependencies and set up\n[workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) \n1. `git checkout -b\nbutton-fix` to create a new branch for your changes. \n1. Edit file(s) in\n`/packages/cf-buttons/` however you want. 1. Run `gulp docs` to update the\ndocumentation. \n1. `yarn run cf-link` to\n[link](https://yarnpkg.com/lang/en/docs/cli/link/) your local CF components.\n1. `cd ~/wherever/cfgov-refresh/` to navigate to another project where you'd\nlike to test your buttons changes (in this case, cfgov-refresh). \n1. `yarn link\ncf-buttons` to link cf-buttons to cfgov-refresh. \n1. `gulp build` in\ncfgov-refresh to compile your stylesheets. \n1. [Start\ncfgov-refresh](https://cfpb.github.io/cfgov-refresh/usage/) and navigate to a\npage with buttons to view your cf-buttons changes. \n1. When you're pleased with\nyour changes, `cd` back to your `capital-framework` repo and commit your\nchanges: `git commit -am \"Fix button border radius\"` \n1. `git push origin\nbutton-fix` to push your branch up to GitHub. \n1. Go to\nhttps://github.com/cfpb/capital-framework and open a pull request to merge\n`button-fix` into `master`.\n\nIf you are not a current contributor to Capital Framework, use forks by first\nclicking the fork button on top of the repository and cloning your fork in\nstep \n1. In the final step, go to https://github.com/cfpb/capital-framework and\nfile a pull request by clicking the link to compare changes across forks.\n\n\n### Updating Documentation\n\nDocumentation is maintained in each component's folder's `usage.md` file.\nChanges to documentation are made on the `master` branch using the workflow\nabove and pulled in the `docs` directory using the `gulp docs` command. The\n`usage.md` files are then rendered as separated pages on Capital Framework's\nwebsite [(See this example from\ncf-core)](https://cfpb.github.io/capital-framework/components/cf-core/).\n\n\n### Testing components locally\n\n#### Automated tests\n\nAutomated tests can be run with the command `yarn test`.\n\n#### Testing in the documentation site\n\nIf you're hacking on a component and want to test it in the documentation site\nfollow the following steps.\n\n1. Ensure that you have the Bundler Ruby gem installed\nby running `gem install bundler`.\n([more info](https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll#requirements)).\n1. Check out a working branch. 1. Run `gulp docs`. 1. Go into the\ndocumentation directory with `cd docs`. 1. Run `bundle install` if you haven't\nbefore\n(also run `bundle update` periodically).\n1. Run `bundle exec jekyll serve watch` and visit http://localhost:4000/.\n\n\n### Browser support and testing\n\nWe configure [Autoprefixer](#autoprefixer) and [Babel](#babel) to support the\nfollowing list of browsers.\n\n- Latest 2 releases of all browsers including:\n- Chrome\n- Firefox\n- Safari\n- Internet Explorer\n- Edge\n- Opera\n- iOS Safari\n- Opera Mini\n- Android Browser\n- BlackBerry Browser\n- Opera Mobile\n- Chrome for Android\n- Firefox for Android\n- Samsung Internet\n- Internet Explorer 9\n\nhttp://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+9\n\nAs well as additional Autoprefixer support for:\n\n- Internet Explorer 8\n\nhttp://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+8\n\nWhat this means to the end-user is we've added a level of backward\ncompatability for modern features as much as possible. This doesn't\nnecessarily mean feature parity. Where it's impossible or impractical to\nimplement a modern feature, we fallback to standard practices for that\nbrowser. For example, we do not deliver interactive scripting for Internet\nExplorer 8, but we do ensure that default browser features continue to work so\nusers that can't or don't want to upgrade continue to have access to the site\nand our content.\n\n\n#### Browser Testing\n\nWe have automated tests that use a headless version of Chrome to ensure the\nmajority of the site is working as expected. For manual testing, we\nrealistically test this project locally or in a virtual environment with the\nfollowing list of browsers:\n\n- Chrome\n- Firefox\n- Safari\n- Internet Explorer 8, 9, 10, and 11\n- Edge\n- iOS Safari\n- Chrome for Android\n\n\n#### Autoprefixer\n\nAutoprefixer parses our CSS and adds vendor prefixes to rules where necessary\nusing reported feature support by [Can I Use](https://caniuse.com/). For more\ninformation visit the [Autoprefixer documentation site](https://autoprefixer.github.io/).\n\n#### Babel\n\nBabel compiles our [ES6](http://es6-features.org/) JavaScript where necessary\nfor the browsers that either don't support or have limited support of ES6\nfeatures. For more information visit the [Babel documentation site](https://babeljs.io/).\n\n#### Known feature differences\n\n- JavaScript: We do not serve interactive scripting to IE 8 but we do deliver\nanalytics via JavaScript.\n- Icons: We currently use icon fonts to deliver scalable icons. Browsers that\ndo not support icon fonts unfortunately do not receive backups but we try to\nalways pair icons with text.\n\n#### Resources\n\n- https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ -\nhttps://saucelabs.com/beta/dashboard/tests -\nhttp://developer.samsung.com/remotetestlab/rtlDeviceList.action#\n\n### Accessibility testing\n\n\nWe deeply value accessible web products and work to ensure that all of our\ncomponents comply with Section 508 rules for creating accessible software and\nwebsites. We actively test components to ensure that they are keyboard and\nscreen reader friendly.\n\n\n## Release management\n\nReady to publish changes to npm?\n\n1. Ensure you're on `master` and `git pull` to confirm you're up-to-date. 1.\nExport a personal access token called\n[`GITHUB_AUTH`](https://github.com/lerna/lerna-changelog#github-token).\n1. Run `yarn run changelog` and open `CHANGELOG.md` to see a preview\nof new changelog entries.\nWe use a [tool](https://github.com/lerna/lerna-changelog#usage) that scans our\nPull Requests for specific labels so if you see a PR missing from the changelog,\nensure it has been labeled `breaking`, `enhancement`, `bug`,\n`documentation` or `internal`.\n1. If you're pleased with the changelog preview,\n`git checkout CHANGELOG.md` to reset it.\n1. Run `yarn run release` to start the release. 1. If all packages are shown\nas having been published,\nrun `git push` to push changes to the remote `master` branch.\n\nLerna will update the changelog, ask for a new version number, create a git\ntag, push to GitHub and publish to npm.\n\n\n## Notes\n\nThe CSS and JavaScript files that are generated during the build task are only\nused for testing. Because this project doesn't necessarily produce a final\nproduct it is up to the projects that use it to generate and maintain their\nown browser support config. An example of this is\n[consumerfinance.gov](https://github.com/cfpb/cfgov-refresh), which generates\nspecific IE 8 and 9 stylesheets, whereas the Capital Framework build task\nbundles those with the main stylesheet. Despite the differences in delivery,\nthe output and support are the same.\n\n### Adhere to any linting errors or warnings\n\nThe `gulp lint` linting tasks that are set up within the build processes are\nthere to promote consistency. When contributing code please publicly track\nthat there are no linting errors or warnings using the testing checklist in\nthe pull request description.\n\n\n### Follow our CSS naming conventions\n\n**We are using a customized BEM format**\n\n```css .block-name .block-name_element-name .block-name__block-modifier\n.block-name_element-name__element-modifier ```\n\n**Avoid creating elements of modifiers**\n\nAppending an element name to a modifier class can result in a confusing class\nname like `.list__space_item`. Avoid this in favor of using a descendant, like\nthis: `.list__spaced .list_item`.\n\n\n### Shoot for mobile first declarations\n\nIn most cases styles should be declared mobile first, then enhanced with\n`min-width` media queries. By doing this we create a base experience that all\ndevices can use and one that does not require media query support.","objects":{"entry":{"path":"docs/getting-started/contributing-to-the-code-base.md","sha":"9287b0ab8fb42d68c37b0da8bbf3e8462cc98ee8"},"files":[]},"timeStamp":"2019-10-17T15:49:23.554Z"}