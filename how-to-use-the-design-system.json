{"type":"PR","pr":{"number":197,"head":"5b8419f3a59223eddbf51209b3d1df209d2f054e"},"user":"George Kokkinidis","status":"draft","branch":"cms/how-to-use-the-design-system","collection":"getting-started","title":"How to use the design system","description":"### Anatomy of a component\n\n#### src/\n\nThe working folder containing component source files.\n\n#### screenshot.png\n\nScreenshot of the component in a browser.\n\n#### usage.md\n\nMarkdown file containing code snippets of how to use the component. cf-buttons is a good example.\n\n#### package.json\n\nUsed to record the component’s dependencies, keywords and description, among other things. The less property should point to the component’s Less file, styles to the component’s compiled CSS file, and main to the component’s JavaScript file, if applicable. Whenever you update a component, increment the component’s package.json file appropriately.\n\n### Getting started\n\nCapital Framework provides a set of modular HTML, CSS, and JavaScript patterns that can be used both collectively and individually. There are several ways to integrate Capital Framework into your project:\n\n1. Using the generator\n2. Using Less\n3. Downloading the compiled CSS\n\nOur recommended workflow is to use the generator to scaffold out a new Capital Framework project. This allows you to pick and choose your modules as well as providing a solid front end build process.\n\n#### Using the generator\n\nTo use the generator, you will need [Node.js](http://nodejs.org/), [Yeoman](http://yeoman.io/), and [Gulp](http://gulpjs.com/).\n\n##### Installing dependencies\n\n[Node.js](http://nodejs.org/) can be downloaded and installed directly from the Node website, or by using a package manager for your system. At the CFPB we use Homebrew. To install the dependencies:\n\n```\nbrew install node  # if installing node with Homebrew\nnpm install --global gulp yo generator-cf\n```\n\n##### Scaffolding out a project\n\nTo create a new project, create a directory, cd into that directory, and run the yo cf command:\n\n```\nmkdir my-awesome-project\ncd my-awesome-project\nyo cf\n```\n\nThe generator will prompt you to complete information about the project and choose the Capital Framework modules you would like to use.\n\n##### Navigating the project folder\n\nOnce the generator has finished you’ll have a folder full of files and folders. Here’s a quick guide on working with these files:\n\n* Run npm run build to process the files in src and output them to dist.\n* To view your site, go to the dist directory and start a local server: cd dist && python -m SimpleHTTPServer. You can now navigate to localhost:8000 in your web browser.\n* Edit files within the src directory and re-run npm run build to view changes.\n\n###### Editing the Less and JS\n\nThe generator has created a starter Less file at `src/static/css/main.less`. This file includes all of the necessary imports needed for Capital Framework. There is also a starter JavaScript file at `src/static/js/main.js`. Both `main.less` and `main.js` are already wired into `Gruntfile.js` (or `gulp/tasks/` if you selected gulp) so compiling is as easy as running `npm run build`. It also copies files from src into `dist`, which will update what you see at `localhost:8000/`.\n\n##### Theming / Customizing\n\nYou can override component UI colors within `src/static/css/cf-theme-overrides.less`. This is already set up for you and gets imported by `main.less`. If you would like to use your own color palette simply replace the contents of `brand-palette.less` with your own color variables, then update `cf-theme-overrides`.less by overriding each UI color variable with a color from `brand-palette.less` or any color of your choosing.\n\nThe same applies when you need to add custom styles to your project. You can add any custom `.less` files to your project that you may need, just remember to import them in `main.less` using the correct path.\n\n##### Using Less\n\nIf you don’t want to use the generator, you can just download the source files and import them into your project.\n\n> NOTE: Be sure to run the Less files through Autoprefixer, or your compiled Capital Framework CSS will not work perfectly in older browsers.\n\nRun `npm install capital-framework`. This will download Capital Framework to your project’s `node_modules` directory. You can then import the framework into your application’s primary Less file:\n\n```\n@import (less) \"node_modules/capital-framework/src/capital-framework.less\";\n\n/* the rest of your stylesheet… */\n```\n\nJust want one or two CF components and not the entire framework? Simply install and `@import` only the components you need.\n\n```\nnpm install cf-buttons cf-icons\n```\n\n```\n@import (less) \"node_modules/cf-buttons/src/cf-buttons.less\";\n@import (less) \"node_modules/cf-icons/src/cf-icons.less\";\n\n/* the rest of your stylesheet… */\n```\n\n##### Downloading the compiled CSS\n\nCapital Framework’s compiled CSS can be downloaded here. Download it and copy the files found in the `dist/` directory to your project. Use standard `<link>` and `<script>` tags.\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Awesome Project</title>\n    <link rel=\"stylesheet\" href=\"capital-framework.min.css\">\n</head>\n<body>\n    <!-- Your project's HTML goes here. -->\n    <script src=\"capital-framework.min.js\"></script>\n</body>\n</html>\n```","objects":{"entry":{"path":"docs/getting-started/how-to-use-the-design-system.md","sha":"44ef8fee74a6244326869169ef01dfb92991ee17"},"files":[]},"timeStamp":"2019-08-06T17:35:05.045Z"}