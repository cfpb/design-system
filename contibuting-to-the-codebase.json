{"type":"PR","pr":{"number":332,"head":"171330aaaffa7169452b184b50b82cc61a63bf25"},"user":"Catherine Farman","status":"draft","branch":"cms/contibuting-to-the-codebase","collection":"getting-started","commitMessage":"Create \"contibuting-to-the-codebase\" page","title":"Contibuting to the codebase","description":"<p class=\"lead-paragraph\">  All contributions to this project will be released under the CC0 public domain\n  dedication. By submitting a pull request or filing a bug, issue, or feature\n  request, you are agreeing to comply with this waiver of copyright interest.\n  Details can be found in our <a href=\"https://github.com/cfpb/design-system/blob/master/TERMS.md\">TERMS</a> and\n  <a href=\"https://github.com/cfpb/design-system/blob/master/LICENSE\">LICENSE</a>.\n</p>\n\n  There are 3 primary ways to help:\n   - [Using the issue tracker](#using-the-issue-tracker), and\n   - [Changing the codebase](#changing-the-codebase)\n   - [Release management](#release-management)\n\n\n  ## Using the issue tracker\n\n  Use the issue tracker to suggest feature requests, report bugs, and ask\n  questions. This is also a great way to connect with the developers of the\n  project as well as others who are interested in this solution.\n  Use the issue tracker to find ways to contribute. Find a bug or a feature,\n  mention in the issue that you will take on that effort, then follow the\n  _Changing the codebase_ guidance below.\n\n\n  ## Changing the codebase\n\n  We work off feature branches from the `master` branch. After you've edited a\n  component, open a Pull Request to merge your feature branch back into\n  `master`.\n\n  For example, if you wanted to change `cf-buttons` and use it in\n  [cfgov-refresh](https://github.com/cfpb/cfgov-refresh), here's what you'd do:\n\n1. `git clone git@github.com:cfpb/capital-framework.git`, if you haven't\n  already. \n1. `cd capital-framework` \n1. `git checkout master && git pull` to\n  ensure you're on the latest changes (this step is not necessary when cloning\n  for the first time). \n1. `yarn` to install dependencies and set up\n  [workspaces](https://yarnpkg.com/lang/en/docs/workspaces/) \n1. `git checkout -b\n  button-fix` to create a new branch for your changes. \n1. Edit file(s) in\n  `/packages/cf-buttons/` however you want. 1. Run `gulp docs` to update the\n  documentation. \n1. `yarn run cf-link` to\n  [link](https://yarnpkg.com/lang/en/docs/cli/link/) your local CF components.\n1. `cd ~/wherever/cfgov-refresh/` to navigate to another project where you'd\n  like to test your buttons changes (in this case, cfgov-refresh). \n1. `yarn link\n  cf-buttons` to link cf-buttons to cfgov-refresh. \n1. `gulp build` in\n  cfgov-refresh to compile your stylesheets. \n1. [Start\n  cfgov-refresh](https://cfpb.github.io/cfgov-refresh/usage/) and navigate to a\n  page with buttons to view your cf-buttons changes. \n1. When you're pleased with\n  your changes, `cd` back to your `capital-framework` repo and commit your\n  changes: `git commit -am \"Fix button border radius\"` \n1. `git push origin\n  button-fix` to push your branch up to GitHub. \n1. Go to\n  https://github.com/cfpb/capital-framework and open a pull request to merge\n  `button-fix` into `master`.\n\n  If you are not a current contributor to Capital Framework, use forks by first\n  clicking the fork button on top of the repository and cloning your fork in\n  step \n1. In the final step, go to https://github.com/cfpb/capital-framework and\n  file a pull request by clicking the link to compare changes across forks.\n\n\n  ### Updating Documentation\n\n  Documentation is maintained in each component's folder's `usage.md` file.\n  Changes to documentation are made on the `master` branch using the workflow\n  above and pulled in the `docs` directory using the `gulp docs` command. The\n  `usage.md` files are then rendered as separated pages on Capital Framework's\n  website [(See this example from\n  cf-core)](https://cfpb.github.io/capital-framework/components/cf-core/).\n\n\n  ### Testing components locally\n\n  #### Automated tests\n\n  Automated tests can be run with the command `yarn test`.\n\n  #### Testing in the documentation site\n\n  If you're hacking on a component and want to test it in the documentation site\n  follow the following steps.\n\n  1. Ensure that you have the Bundler Ruby gem installed\n     by running `gem install bundler`.\n     ([more info](https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll#requirements)).\n  1. Check out a working branch. 1. Run `gulp docs`. 1. Go into the\n  documentation directory with `cd docs`. 1. Run `bundle install` if you haven't\n  before\n     (also run `bundle update` periodically).\n  1. Run `bundle exec jekyll serve watch` and visit http://localhost:4000/.\n\n\n  ### Browser support and testing\n\n  We configure [Autoprefixer](#autoprefixer) and [Babel](#babel) to support the\n  following list of browsers.\n\n  - Latest 2 releases of all browsers including:\n      - Chrome\n      - Firefox\n      - Safari\n      - Internet Explorer\n      - Edge\n      - Opera\n      - iOS Safari\n      - Opera Mini\n      - Android Browser\n      - BlackBerry Browser\n      - Opera Mobile\n      - Chrome for Android\n      - Firefox for Android\n      - Samsung Internet\n  - Internet Explorer 9\n\n  http://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+9\n\n  As well as additional Autoprefixer support for:\n\n  - Internet Explorer 8\n\n  http://browserl.ist/?q=last+2+versions%2C+Explorer+%3E%3D+8\n\n  What this means to the end-user is we've added a level of backward\n  compatability for modern features as much as possible. This doesn't\n  necessarily mean feature parity. Where it's impossible or impractical to\n  implement a modern feature, we fallback to standard practices for that\n  browser. For example, we do not deliver interactive scripting for Internet\n  Explorer 8, but we do ensure that default browser features continue to work so\n  users that can't or don't want to upgrade continue to have access to the site\n  and our content.\n\n\n  #### Browser Testing\n\n  We have automated tests that use a headless version of Chrome to ensure the\n  majority of the site is working as expected. For manual testing, we\n  realistically test this project locally or in a virtual environment with the\n  following list of browsers:\n\n  - Chrome - Firefox - Safari - Internet Explorer 8, 9, 10, and 11 - Edge - iOS\n  Safari - Chrome for Android\n\n\n  #### Autoprefixer\n\n  Autoprefixer parses our CSS and adds vendor prefixes to rules where necessary\n  using reported feature support by [Can I Use](https://caniuse.com/). For more\n  information visit the [Autoprefixer documentation site](https://autoprefixer.github.io/).\n\n  #### Babel\n\n  Babel compiles our [ES6](http://es6-features.org/) JavaScript where necessary\n  for the browsers that either don't support or have limited support of ES6\n  features. For more information visit the [Babel documentation site](https://babeljs.io/).\n\n  #### Known feature differences\n\n  - JavaScript: We do not serve interactive scripting to IE 8 but we do deliver\n    analytics via JavaScript.\n  - Icons: We currently use icon fonts to deliver scalable icons. Browsers that\n    do not support icon fonts unfortunately do not receive backups but we try to\n    always pair icons with text.\n\n  #### Resources\n\n  - https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ -\n  https://saucelabs.com/beta/dashboard/tests -\n  http://developer.samsung.com/remotetestlab/rtlDeviceList.action#\n\n\n  ## Release management\n\n  Ready to publish changes to npm?\n\n  1. Ensure you're on `master` and `git pull` to confirm you're up-to-date. 1.\n  Export a personal access token called\n     [`GITHUB_AUTH`](https://github.com/lerna/lerna-changelog#github-token).\n  1. Run `yarn run changelog` and open `CHANGELOG.md` to see a preview\n     of new changelog entries.\n     We use a [tool](https://github.com/lerna/lerna-changelog#usage) that scans our\n     Pull Requests for specific labels so if you see a PR missing from the changelog,\n     ensure it has been labeled `breaking`, `enhancement`, `bug`,\n     `documentation` or `internal`.\n  1. If you're pleased with the changelog preview,\n     `git checkout CHANGELOG.md` to reset it.\n  1. Run `yarn run release` to start the release. 1. If all packages are shown\n  as having been published,\n     run `git push` to push changes to the remote `master` branch.\n\n  Lerna will update the changelog, ask for a new version number, create a git\n  tag, push to GitHub and publish to npm.\n\n\n  ## Notes\n\n  The CSS and JavaScript files that are generated during the build task are only\n  used for testing. Because this project doesn't necessarily produce a final\n  product it is up to the projects that use it to generate and maintain their\n  own browser support config. An example of this is\n  [consumerfinance.gov](https://github.com/cfpb/cfgov-refresh), which generates\n  specific IE 8 and 9 stylesheets, whereas the Capital Framework build task\n  bundles those with the main stylesheet. Despite the differences in delivery,\n  the output and support are the same.\n\n  ### Adhere to any linting errors or warnings\n\n  The `gulp lint` linting tasks that are set up within the build processes are\n  there to promote consistency. When contributing code please publicly track\n  that there are no linting errors or warnings using the testing checklist in\n  the pull request description.\n\n\n  ### Follow our CSS naming conventions\n\n  **We are using a customized BEM format**\n\n  ```css .block-name .block-name_element-name .block-name__block-modifier\n  .block-name_element-name__element-modifier ```\n\n  **Avoid creating elements of modifiers**\n\n  Appending an element name to a modifier class can result in a confusing class\n  name like `.list__space_item`. Avoid this in favor of using a descendant, like\n  this: `.list__spaced .list_item`.\n\n\n  ### Shoot for mobile first declarations\n\n  In most cases styles should be declared mobile first, then enhanced with\n  `min-width` media queries. By doing this we create a base experience that all\n  devices can use and one that does not require media query support.\n---\n\n","objects":{"entry":{"path":"docs/getting-started/contibuting-to-the-codebase.md","sha":"9c60fa9ffd57534139036b830624cc14c74b69a2"},"files":[]},"timeStamp":"2019-09-13T18:29:56.008Z"}